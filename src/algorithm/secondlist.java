package algorithm;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.JFrame;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author PC
 */
public class secondlist extends javax.swing.JFrame {
    int xMouse;
    int yMouse;
    public secondlist() {
        initComponents();
    }

              private static final int sample = 5;  
            private static Vector <String> vector1 = new Vector<String>();  //선택된 list 들이 저장될 vector
            private static Vector <String> seoul = new Vector<String>();
            private static Vector <String> date_course = new Vector<String>();
        private static Vector <String> date_course1 = new Vector<String>();
        private static Vector <String> date_course2 = new Vector<String>();
       private static Vector <String> date_course3 = new Vector<String>();
        private static Vector <String> date_course4 = new Vector<String>();  
         private static Vector <String> date_course5 = new Vector<String>(); 
       private static Vector <String> choose = new Vector<String>();
       private static Vector <String> choose1 = new Vector<String>();
       private static Vector <String> choose2 = new Vector<String>();
       private static Vector <String> choose3 = new Vector<String>();
         private static Vector <String> choose4 = new Vector<String>();
           private static Vector <String> choose5 = new Vector<String>(); 
       private static Vector <String> notchoose = new Vector<String>();
       private static Vector <String> notchoose1 = new Vector<String>();
       private static Vector <String> notchoose2 = new Vector<String>();
       private static Vector <String> notchoose3 = new Vector<String>();
        private static Vector <String> notchoose4 = new Vector<String>();  
         private static Vector <String> notchoose5 = new Vector<String>();  
       private static Vector <String> maxrecommend = new Vector<String>();
       private static Vector <String> maxrecommendname = new Vector<String>();
       private static Vector <String> minpath = new Vector<String>();
    
   
   // addition
    private static Vector<String> result = new Vector<String>();
    private static Vector<String> localresult = new Vector<String>();
    private static Vector<String> localname = new Vector<String>();
    private static Vector<String> totalcost = new Vector<String>();
    private static Vector<String> vector1_index = new Vector<String>();
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Framedrag = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        search_btn = new javax.swing.JButton();
        remove_btn = new javax.swing.JButton();
        update = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        selected_list = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("HYgtrE", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("X");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel1);
        jLabel1.setBounds(500, 0, 40, 50);

        jLabel2.setFont(new java.awt.Font("HYgtrE", 0, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("-");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel2);
        jLabel2.setBounds(460, 0, 40, 50);

        Framedrag.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                FramedragMouseDragged(evt);
            }
        });
        Framedrag.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                FramedragMousePressed(evt);
            }
        });
        getContentPane().add(Framedrag);
        Framedrag.setBounds(0, 0, 550, 50);

        jPanel3.setBackground(new java.awt.Color(255, 211, 211));
        jPanel3.setLayout(null);
        getContentPane().add(jPanel3);
        jPanel3.setBounds(0, 0, 550, 50);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(null);

        jPanel2.setBackground(new java.awt.Color(255, 233, 233));
        jPanel2.setLayout(null);

        search_btn.setBackground(new java.awt.Color(255, 255, 255));
        search_btn.setText("search");
        search_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                search_btnMouseClicked(evt);
            }
        });
        jPanel2.add(search_btn);
        search_btn.setBounds(380, 30, 77, 27);

        remove_btn.setBackground(new java.awt.Color(255, 255, 255));
        remove_btn.setText("remove");
        remove_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove_btnActionPerformed(evt);
            }
        });
        jPanel2.add(remove_btn);
        remove_btn.setBounds(230, 30, 81, 27);

        update.setBackground(new java.awt.Color(255, 255, 255));
        update.setText("update");
        update.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateMouseClicked(evt);
            }
        });
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        jPanel2.add(update);
        update.setBounds(80, 30, 77, 27);

        jPanel1.add(jPanel2);
        jPanel2.setBounds(0, 520, 550, 90);

        jScrollPane1.setBorder(null);

        selected_list.setFont(new java.awt.Font("LG PC", 0, 24)); // NOI18N
        selected_list.setForeground(new java.awt.Color(102, 102, 102));
        jScrollPane1.setViewportView(selected_list);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(140, 120, 250, 400);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/ezgif.com-gif-maker.gif"))); // NOI18N
        jPanel1.add(jLabel3);
        jLabel3.setBounds(210, 50, 420, 470);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/ezgif.com-gif-maker.gif"))); // NOI18N
        jPanel1.add(jLabel4);
        jLabel4.setBounds(-90, 50, 420, 470);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 550, 610);

        setSize(new java.awt.Dimension(547, 609));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    private static DefaultListModel list = new DefaultListModel();
   
    
    public void add_list (String str) {
      
    vector1.addElement(str);
     for(int i=0; i<vector1.size();i++) {    
       System.out.println(vector1.elementAt(i));
        }
    }  // 선택할 장소를 second_list에 추가하는 함수
    
    public int list_number () {
        return vector1.size();
    }
    public String[] add_third_result () {
        String[] str = new String[localresult.size()];
        for(int i=0;i<localresult.size();i++){
            str[i] = localresult.elementAt(i);
        }
        return str;
    } 
    
     public String[] add_selected_third_result () {
        String[] str = new String[minpath.size()];
        for(int i=0;i<minpath.size();i++){
            str[i] = minpath.elementAt(i);
        }
        return str;
    } 
    
    public String result_list () {
        // addition
        String path_result="";
        int s = 1;
       int a = 0;
       double low = 1000000;
        for(int i=1;i<localresult.size();i++) {
            path_result += localresult.elementAt(i) + " -> ";
            if(i%vector1.size()== 0) {
      path_result += totalcost.elementAt(s) + "\n";
      double tmp2 = Double.parseDouble(totalcost.elementAt(s));
                    if(tmp2 < low) {
         low = tmp2;
         a = i;}
                    s++;
                    }
      }
        System.out.println(path_result);
      path_result += "최소 거리!!" + "\n";
      for(int i = a-vector1.size()+ 1;i<=a;i++) {
                    path_result += localresult.elementAt(i) + " -> ";
           
      }
      
      path_result += low;
   
      
   
                return path_result;
    }   // 마지막 화면에 출력될 최단 경로 리스트 표현
    
    private void remove_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove_btnActionPerformed
      System.out.println(selected_list.getSelectedIndex());
        vector1.removeElementAt(selected_list.getSelectedIndex());
       selected_list.setListData(vector1);
       update.setEnabled(true);
    }//GEN-LAST:event_remove_btnActionPerformed

    private void search_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_search_btnMouseClicked
             
           
          File recommendfile;
          recommendfile = new File("textfile/recommendcost.txt");
          try {

             BufferedReader bufReader = new BufferedReader(new InputStreamReader(new FileInputStream(recommendfile), "euc-kr"));
             String line1 = "";
             String tmp = bufReader.readLine();
             
               while((line1 = bufReader.readLine())!= null) { 
                  seoul.addElement(line1);
               }       
          } catch (FileNotFoundException e)    {}
             catch (IOException e) {}
    
          
          
             int k=0;
          for(int j=0;j<seoul.size();j=j+1) {
          if(j%(sample+1) == 0){
             date_course.addElement(seoul.elementAt(j)); // 데이트 장소 이름
          }
          else if(j%(sample+1) == 1) {
             date_course1.addElement(seoul.elementAt(j)); 
          }
          else if(j%(sample+1) == 2) {
             date_course2.addElement(seoul.elementAt(j)); 
          }
          else if(j%(sample+1) == 3) {
             date_course3.addElement(seoul.elementAt(j)); 
          }
          
           else if(j%(sample+1) == 4) {  
             date_course4.addElement(seoul.elementAt(j)); 
          }
           else if(j%(sample+1) == 5) {  
             date_course5.addElement(seoul.elementAt(j)); 
          }
          
          
          }
       
           System.out.println("datecourse: " + date_course);
           System.out.println("datecourse1: " + date_course1);
           System.out.println("datecourse2: " +date_course2);
           System.out.println("datecourse3: " +date_course3);
          
             for(int i=0;i<vector1.size();i++){
                 for(int j=0;j<date_course.size();j++){                 
                    if(vector1.elementAt(i).equalsIgnoreCase(date_course.elementAt(j))){
                             choose.addElement(date_course.elementAt(j));  
                             choose1.addElement(date_course1.elementAt(j));
                             choose2.addElement(date_course2.elementAt(j));
                             choose3.addElement(date_course3.elementAt(j));
                             choose4.addElement(date_course4.elementAt(j));  
                             choose5.addElement(date_course5.elementAt(j));
                             
                             break;
                    }}}
             int[] seoul_check = new int[date_course.size()];
             for(int i=0;i<date_course.size();i++) {
                 seoul_check[i] = 0;
             }
             System.out.println("vector1: " + vector1);
             for(int i=0;i<vector1.size();i++) {
                for(int j=0;j<date_course.size();j++) {
                   if(vector1.elementAt(i).equalsIgnoreCase(date_course.elementAt(j))) {
                      seoul_check[j] = 1;
                   }
                }
             }
             for(int i=0;i<date_course.size();i++) {
               System.out.println(seoul_check[i]);
             }
             for(int i=0;i<date_course.size();i++) {
                if(seoul_check[i] == 0) {
                   notchoose.addElement(date_course.elementAt(i));
                   notchoose1.addElement(date_course1.elementAt(i));
                   notchoose2.addElement(date_course2.elementAt(i));
                   notchoose3.addElement(date_course3.elementAt(i));
                    notchoose4.addElement(date_course4.elementAt(i)); 
                  notchoose5.addElement(date_course5.elementAt(i)); 
                }
                 
          
             }
   
        double[] a = new double[sample];
        double[] b = new double[sample];   
     
        int a1 = 0, a2=1, a3=2, a4=3, a5=4; 
        double motherA=0, motherB=0;
        double son=0;
        double max = -1;
        int r = 0;
        
        for(int i=0;i<choose.size();i++)   {
             a[a1] = Double.parseDouble(choose1.elementAt(i));
             a[a2] = Double.parseDouble(choose2.elementAt(i));
             a[a3] =Double.parseDouble(choose3.elementAt(i));
           
               a[a4] =Double.parseDouble(choose4.elementAt(i));  
               a[a5] =Double.parseDouble(choose5.elementAt(i));  
            
             motherA = Math.sqrt((a[a1]*a[a1])+(a[a2]*a[a2])+(a[a3]*a[a3])+(a[a4]*a[a4])+(a[a5]*a[a5]));   
             for(int j=0;j<notchoose.size();j++){
                 b[a1] = Integer.parseInt(notchoose1.elementAt(j));
                  b[a2] = Integer.parseInt(notchoose2.elementAt(j));
                  b[a3] = Integer.parseInt(notchoose3.elementAt(j));        
               b[a4] =Double.parseDouble(notchoose4.elementAt(i));  
               b[a5] =Double.parseDouble(notchoose5.elementAt(i));
        
                  motherB = Math.sqrt((b[a1]*b[a1])+(b[a2]*b[a2])+(b[a3]*b[a3])+(b[a4]*b[a4])+(b[a5]*b[a5]));  
                  son = (a[a1]*b[a1])+(a[a2]*b[a2])+(a[a3]*b[a3])+(a[a4]*b[a4]) + (a[a5]*b[a5]);  
                  double cost = (son/(motherA*motherB))*100;
                  double cost1 = Math.round(cost);
                  double temp = cost1/100;
           
                  if(max < temp) {
                      max = temp;
                      r = j;    
                }    
           }
         
             String   maxstr = Double.toString(max);
             maxrecommend.addElement(maxstr);
             String   maxstrname = Integer.toString(r);
             maxrecommendname.addElement(notchoose.elementAt(r));
             max = 0;}
        for(int i=0;i<maxrecommend.size();i++) {
           System.out.println("-추천장소-: \n" + maxrecommendname.elementAt(i));
           System.out.println("유사도: \n" + maxrecommend.elementAt(i));
        }
        
        
        /// 아래부터 길찾기 알고리즘
           vector1_index.addElement("vector1_index");
         result.addElement("result");
         localname.addElement("localname");
         localresult.addElement("localresult");
         totalcost.addElement("totalcost");
  
      BufferedReader bufReader = null;
      File file;
      
      file = new File("textfile/distance_seoul.txt");
      int count = 0;
      /////
      try {
      
      bufReader = new BufferedReader(new InputStreamReader(new FileInputStream(file), "utf-8"));
      
      String line = "";
      while((line = bufReader.readLine()) != null){
         System.out.println(line);
         StringTokenizer st = new StringTokenizer(line, "_");
         while(st.hasMoreTokens()) {
            if(count == 2) break;
            String temp = st.nextToken();
            if(count ==1) {
               localname.addElement(temp);
            }
            count++;
         }
         count = 0;
        }
      }
      
      catch (FileNotFoundException e)    {}
      catch (IOException e) {}
   
      int n=30; // 노드의 개수
   
      for(int i=1;i<localname.size();i++) {
         for(int j=0;j<vector1.size();j++) {
            if(localname.elementAt(i).equalsIgnoreCase(vector1.elementAt(j))) {
               String to = Integer.toString(i);
               vector1_index.addElement(to);
            }
         }
      }
     
      System.out.println(localname.size());
      System.out.println(localname);
      System.out.println(vector1);
      System.out.println(vector1_index);
      System.out.println(vector1_index.size());
      double min =100000;
      double temp= 0;
   
   
      for(int i=1;i<vector1_index.size();i++) {
         for(int j=1;j<vector1_index.size();j++) {
         if(i == j ) {
          System.out.println("!!!!1");
             continue;
         }
         int to1 = Integer.parseInt(vector1_index.elementAt(i));
         int to2 = Integer.parseInt(vector1_index.elementAt(j));
        
         System.out.println(to1 + ", " + to2);
        
         temp= findpath(to1, to2, n, vector1.size());
         if(temp  < min) {
            min = temp;
            }
         }
      }
      System.out.println("min: " + min);
     System.out.println("result: " + result);
      System.out.println("resultsize: " + result.size());
     
      for(int i=1;i<result.size();i++) {
         for(int j=1;j<localname.size();j++) {//localname
            int tmp = Integer.parseInt(result.elementAt(i));
            if(tmp == j) {
               localresult.addElement(localname.elementAt(tmp));
               break;
            }
         }
      }
     System.out.println(result);
     System.out.println(totalcost);
      System.out.println(result.size());
      System.out.println(localresult);    
      
   // addition----------------------------------
   String path_result="";
        int s = 1;
       int aa = 0;
       double low = 1000000;
        for(int i=1;i<localresult.size();i++) {
            if(i%vector1.size()== 0) {
      double tmp2 = Double.parseDouble(totalcost.elementAt(s));
                    if(tmp2 < low) {
         low = tmp2;
         aa = i;}
                    s++;
                    }
      }
        
  
      for(int i = aa-vector1.size()+ 1;i<=aa;i++) {
                minpath.addElement(localresult.elementAt(i));
      }
      
      //addition---------------------------------------------
            System.out.println();
            System.out.println("minpath: " + minpath);
   
            thirdresult third_result = new thirdresult();
     third_result.setVisible(true);
     third_result.pack();
     third_result.setLocationRelativeTo(null);
     third_result.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
     this.dispose();
      
    }//GEN-LAST:event_search_btnMouseClicked
public static double findpath(int start, int end, int num, int selected) 
   {
   double[][] data = new double[31][31];
   File file;
   file = new File("textfile/cost.txt");
   try {
   FileReader filereader = new FileReader(file);
   BufferedReader bufReader = new BufferedReader(filereader);
   String line1 = "";
   String tmp = bufReader.readLine();
   int col = 0, row = 0;
         while((line1 = bufReader.readLine()) != null){
      StringTokenizer st = new StringTokenizer(line1, ",");
      while(st.hasMoreTokens()) {
                    String temp = st.nextToken();
                    double temp2 = Double.parseDouble(temp);
                    data[row][col] = temp2;
         if(col == num+1) break;
         col++;}
         col = 0;
         row++;
         }
  
   }
   catch (FileNotFoundException e)    {}
   catch (IOException e) {}
      int[] arr = new int[vector1_index.size()];
      arr[0] = -1;
      for(int i=1;i<=selected;i++) {
      int tmp = Integer.parseInt(vector1_index.elementAt(i));
      arr[i] = tmp;
      System.out.println("arr!! : " + arr[i]);
      }
      
      
      
       int endpoint=0, startpoint = 0;
      for(int i=1;i<=selected;i++) {
         if(arr[i] == end) {
                 endpoint = i;
              }
         if(arr[i] == start) {
         startpoint = i;}   
         }
         System.out.print(" startpoint: " + startpoint);
         System.out.println(" endpoint: " + endpoint);
      
         int allvisit= 0; // 모두 방문했는지 여부
         int[] visit = new int[selected+1]; // 방문했는지 유무  1 = 방문, 0 = 미방문 
         int[] path = new int[selected+1]; // 시작 점과 끝 점 까지 가능 경로  ex) 1-2-3-4
         
         for(int i=1;i<=selected;i++) {
            visit[i] = 0;
         }
         int path_count =1;
         int visit_count = 1;
         int k = -1;
         double min = 100000;
         
         double total= 0;
         visit[startpoint] = 1;
      
         path[path_count] = start;
         path[selected] = end;
         int stand = path[1];
         while(true) {
            
            for(int i=1;i<=selected;i++) {
               if(visit[i] == 1) {
                  visit_count ++;
               }
               if(visit_count == selected) {
                  allvisit = 1;
               }
               
            }   // 만약 모두 방문했다면 
            
            if(allvisit ==1) {
               break;
            }
            
         
               for(int i =1;i<=selected;i++) {
                  
                  if(visit[i] == 1 || endpoint == i) {
                     continue;
                  }
                  else {
       
                     if(min > data[stand][arr[i]]) {
                        min = data[stand][arr[i]];
                        k=i;
                     }
                  }
               }
               
               total += min;
               visit[k] = 1;
               path_count++;
               path[path_count] = arr[k];
         
               min=100000;
               visit_count = 1; // visit_count 초기화
               
               stand = path[path_count];
         }
         
         total += data[stand][end];
     
     
         for(int i=1;i<=selected;i++) {
            String temp1 = String.valueOf(path[i]);
            result.addElement(temp1);
            
         }

         String temp2 = String.valueOf(total);
         totalcost.addElement(temp2);
         System.out.println(total);
         return total;
   }

  public String result_recommend ()  {
             String line = "";
              for(int i=0;i<maxrecommend.size();i++) {
          line += "-추천장소-\n" + maxrecommendname.elementAt(i) + "\n";
          line += "유사도 : " + maxrecommend.elementAt(i) + "\n\n";
        }
              return line;
     }

    private void updateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateMouseClicked
       
       selected_list.setListData(vector1);      
    }//GEN-LAST:event_updateMouseClicked

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateActionPerformed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
  this.setState(JFrame.ICONIFIED);        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
      System.exit(0);        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1MouseClicked

    private void FramedragMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FramedragMouseDragged
        int x = evt.getXOnScreen();
        int y= evt.getYOnScreen();
       this.setLocation(x-xMouse,y-yMouse);
    }//GEN-LAST:event_FramedragMouseDragged

    private void FramedragMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FramedragMousePressed
       xMouse = evt.getX();
       yMouse=evt.getY();
    }//GEN-LAST:event_FramedragMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(secondlist.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(secondlist.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(secondlist.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(secondlist.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new secondlist().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Framedrag;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton remove_btn;
    private javax.swing.JButton search_btn;
    private javax.swing.JList<String> selected_list;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
